import speech_recognition as sr
import pyttsx3
import datetime
import os
import openai
import schedule
import time

class TejasAI:
    def __init__(self):
        self.engine = pyttsx3.init()
        self.recognizer = sr.Recognizer()
        openai.api_key = "your_openai_api_key"

    def speak(self, text):
        self.engine.say(text)
        self.engine.runAndWait()

    def listen(self):
        with sr.Microphone() as source:
            print("Listening...")
            self.recognizer.adjust_for_ambient_noise(source)
            audio = self.recognizer.listen(source)
        try:
            command = self.recognizer.recognize_google(audio)
            print("You said:", command)
            return command.lower()
        except sr.UnknownValueError:
            self.speak("Sorry, I didn't understand that.")
            return ""
        except sr.RequestError:
            self.speak("Network error. Please try again later.")
            return ""

    def chat(self, prompt):
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}]
        )
        reply = response["choices"][0]["message"]["content"]
        return reply
    
    def schedule_task(self, task, time_str):
        schedule.every().day.at(time_str).do(lambda: self.speak(f"Reminder: {task}"))
        self.speak(f"Task scheduled: {task} at {time_str}")

    def run_scheduler(self):
        while True:
            schedule.run_pending()
            time.sleep(1)

    def execute_command(self, command):
        if "time" in command:
            self.speak(f"The time is {datetime.datetime.now().strftime('%H:%M')}")
        elif "date" in command:
            self.speak(f"Today's date is {datetime.date.today()}")
        elif "schedule" in command:
            self.speak("What task would you like to schedule?")
            task = self.listen()
            self.speak("At what time?")
            time_str = self.listen()
            self.schedule_task(task, time_str)
